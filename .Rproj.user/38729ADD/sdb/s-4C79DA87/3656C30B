{
    "contents" : "library(maps)\n\ndata(state)\ndata(county.fips)\n#map('county', fill=FALSE, boundry=TRUE, col=\"red\")\n\nmapnames <- map(\"state\", plot=FALSE)$names\n# mapnames <- map(\"county\", plot=FALSE)$names\n\nregion_list <- strsplit(mapnames, ':')\n\nmapnames2 <- sapply(region_list, \"[\", 1)\nm <- match(mapnames2, tolower(state.name))\n\nmap.area <- state.area[m]\n\nclr <- rev(heat.colors(8))\n\narea.buckets <- cut(map.area, breaks=8)\n\nmap('state', fill=TRUE, col=clr[area.buckets])\n\n\nchoro <- c( \"red\",  \"red\",  \"red\" ,\"blue\" ,\"blue\", \"blue\",  \"red\")\nrequire(maps)\ndata(state)\nnames(choro) <-names(state)[1:7]\nmap(\"state\",  lty = 1, lwd =1,\n    boundary=TRUE, fill=TRUE,\n    col=choro)\ndata(county.fips)\nnames(choro) <- names(county.fips)[1:7]\nmap(\"county\", lty=1, lwd = 1, boundry = TRUE, fill=TRUE, col = choro)\n\n\n# Extract mapnames for States\nmapnames <- data.frame(\n  state = map(\"state\",plot=FALSE)[4]$names\n  , col = sample(c(\"pink\", \"purple\", \"lavender\", \"blue\"), 63, replace = TRUE)\n)\n\n#Plot the colors\nmap(\"state\", regions = mapnames$state, col = mapnames$col, fill = TRUE, lty = 1, lwd= 1)\n#Plot the outlines\nmap(\"state\", regions = mapnames$state, col = \"black\", fill = FALSE, add = TRUE, lty = 1, lwd = 1)\n\nlibrary(ggplot2)\nunemp <- read.csv(\"unemployment09.csv\", header=F, sep=\",\",stringsAsFactors=F)\nnames(unemp) <- c('id', 'state-fips', \"county-fips\", 'name', 'year', '?', '?', '?', 'rate')\n\nunemp$county <- tolower(gsub(\" County, [A-Z]{2}\", \"\", unemp$name))\nunemp$state <- gsub(\"^.*([A-Z]{2}).*$\", \"\\\\1\", unemp$name)\n\ncounty_df <- map_data('county')\nnames(county_df) <- c(\"long\", \"lat\", \"group\", \"order\", \"state_name\", \"county\")\ncounty_df$state <- state.abb[match(county_df$state_name, tolower(state.name))]\ncounty_df$state_name <- NULL\n\nstate_df <- map_data(\"state\")\n\n# combine together\n\nchoropleth <- merge(county_df, unemp, bu = c(\"state\", \"county\"))\nchoropleth <- choropleth[order(choropleth$order),]\n\n\nrequire(mapproj)\n  map(’state’, proj = ’bonne’, param = 45) # Bonne equal-area projection of states\n\n# because the projection is rectangular, these are not true areas on the globe.\nm = map(\"state\", fill = TRUE, plot = FALSE)\nmap('county',  fill=T, col = colors)\nmap('county',  c('washington', 'oregon') , fill=T, col = colors)colors = c(\"#F1EEF6\", \"#D4B9DA\", \"#C994C7\", \"#DF65B0\", \"#DD1C77\", \"#980043\")\n\ndata(unemp)\ndata(county.fips)\n# define color buckets\ncolors = c(\"#F1EEF6\", \"#D4B9DA\", \"#C994C7\", \"#DF65B0\", \"#DD1C77\", \"#980043\")\nunemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))\nleg.txt <- c(\"<2%\", \"2-4%\", \"4-6%\", \"6-8%\", \"8-10%\", \">10%\")\n# align data with map definitions by (partial) matching state,county\n# names, which include multiple polygons for some counties\ncnty.fips <- county.fips$fips[match(map(\"county\", plot=FALSE)$names,\n                                    county.fips$polyname)]\ncolorsmatched <- unemp$colorBuckets [match(cnty.fips, unemp$fips)]\n# draw map\nmap(\"county\", col = colors[colorsmatched], fill = TRUE, resolution = 0,\n    lty = 0, projection = \"polyconic\")\nmap(\"state\", col = \"white\", fill = FALSE, add = TRUE, lty = 1, lwd = 0.2,\n    projection=\"polyconic\")\ntitle(\"unemployment by county, 2009\")\nlegend(\"topright\", leg.txt, horiz = TRUE, fill = colors)\n# Choropleth Challenge example, based on J’s solution, see:\n# http://blog.revolutionanalytics.com/2009/11/choropleth-challenge-result.html\n# To see the faint county boundaries, use RGui menu: File/SaveAs/PDF\n}",
    "created" : 1394833228698.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2631282750",
    "id" : "3656C30B",
    "lastKnownWriteTime" : 1393376154,
    "path" : "~/Data/religion/Maps tutorial.R",
    "project_path" : "Maps tutorial.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}